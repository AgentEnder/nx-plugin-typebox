"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[685],{3023:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(3696);const c={},r=s.createContext(c);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:a(e.components),s.createElement(r.Provider,{value:t},e.children)}},5277:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>x,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var s=n(2540),c=n(3023);const r={title:"nx-plugin-typebox:extract-schema"},a="nx-plugin-typebox",i={id:"executors/extract-schema",title:"nx-plugin-typebox:extract-schema",description:"Extract Schema Executor",source:"@site/docs/executors/extract-schema.md",sourceDirName:"executors",slug:"/executors/extract-schema",permalink:"/nx-plugin-typebox/executors/extract-schema",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"nx-plugin-typebox:extract-schema"},sidebar:"tutorialSidebar",previous:{title:"Changelog",permalink:"/nx-plugin-typebox/changelog"},next:{title:"nx-plugin-typebox:configuration",permalink:"/nx-plugin-typebox/generators/configuration"}},o={},l=[{value:"Extract Schema Executor",id:"extract-schema-executor",level:2},{value:"Options",id:"options",level:2},{value:'<span class="required">exportName</span>',id:"exportname",level:3},{value:'<span class="required">schemaFile</span>',id:"schemafile",level:3}];function h(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.h1,{id:"nx-plugin-typebox",children:["nx-plugin-typebox",":extract-schema"]}),"\n",(0,s.jsx)(t.h2,{id:"extract-schema-executor",children:"Extract Schema Executor"}),"\n",(0,s.jsx)(t.p,{children:"Extracts the JSON schema from the schema file."}),"\n",(0,s.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,s.jsx)(t.h3,{id:"exportname",children:(0,s.jsx)("span",{className:"required",children:"exportName"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"(string): The name of the export in the schema file which contains the raw JSON schema."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Default: ",(0,s.jsx)(t.code,{children:'"JSONSchema"'})]}),"\n",(0,s.jsx)(t.h3,{id:"schemafile",children:(0,s.jsx)("span",{className:"required",children:"schemaFile"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["(string): The file path to the typescript file containing the schema. Relative to the executor/generator's root directory. For example, ",(0,s.jsx)(t.code,{children:"schema.ts"})," would be the proper value if your plugin contains generators laid out as ",(0,s.jsx)(t.code,{children:"./src/generators/[generator-name]/(schema.ts|schema.json)"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Default: ",(0,s.jsx)(t.code,{children:'"schema.ts"'})]})]})}function x(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);